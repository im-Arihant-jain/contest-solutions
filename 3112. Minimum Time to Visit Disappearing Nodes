class Solution {
public:
    vector<int> minimumTime(int n, vector<vector<int>>& edges, vector<int>& disappear) {
        vector<int> answers(n,INT_MAX);
        vector<pair<int,int>> adj[n];
        int size=edges.size();
        for(int i=0;i<size;i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
            adj[edges[i][1]].push_back({edges[i][0],edges[i][2]});
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,0});
        
        answers[0]=0;
        while(!pq.empty())
        {
            int distance = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            if(distance>answers[node])
            {
                continue;
            }
            vector<pair<int,int>> v1=adj[node];
            for(int j=0;j<v1.size();j++)
            {
                int newdistance = distance + v1[j].second;
                if((newdistance)<answers[v1[j].first])
                {
                    if(disappear[v1[j].first]<=newdistance)
                    {
                        if(disappear[v1[j].first]<=distance)
                        {
                            answers[v1[j].first]=-1;
                        }
                    }
                    else
                    {
                        pq.push({newdistance,v1[j].first});
                        answers[v1[j].first]=newdistance;
                    }
                }
            }
        
        }
        for(int j=0;j<n;j++)
        {
            if(answers[j]==INT_MAX)
            {
                answers[j]=-1;
            }
        }
        return answers;
    }
};
