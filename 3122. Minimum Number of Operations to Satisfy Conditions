class Solution {
public:
    int solve(int col, int n, int m, int prev, map<pair<int, int>, int>& freq,
              vector<vector<int>>& dp) {
        if (col == m)
            return 0;

        if (dp[col][prev] != -1)
            return dp[col][prev];

        int ans = INT_MAX;
        for (int num = 0; num <= 9; num++) {
            if (num != prev)
                ans = min(ans, n - freq[{col, num}] +
                                   solve(col + 1, n, m, num, freq, dp));
        }

        return dp[col][prev] = ans;
    }

    int minimumOperations(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();

        map<pair<int, int>, int> freq;
        for (int j = 0; j < m; j++) {
            for (int i = 0; i < n; i++) {
                freq[{j, grid[i][j]}]++;
            }
        }

        vector<vector<int>> dp(m, vector<int>(11, -1));
        return solve(0, n, m, 10, freq, dp);
    }
};
